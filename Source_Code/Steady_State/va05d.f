* COPYRIGHT (c) 1969 AEA Technology
*######DATE 3 February 1994
C       Toolpack tool decs employed.
C	Arg dimensions made *.
C	NWU removed.
C	DFLOAT -> DBLE.
C
      SUBROUTINE VA05AD(M,N,F,X,DSTEP,DMAX,ACC,MAXFUN,IPRINT,W)
C     .. Scalar Arguments ..
      DOUBLE PRECISION ACC,DMAX,DSTEP
      INTEGER IPRINT,M,MAXFUN,N
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION F(*),W(*),X(*)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION AD,ANMULT,AP,DD,DM,DMULT,DN,DPAR,DS,DSS,DTEST,DW,
     +                 FMIN,FNP,FSQ,PAR,PARM,PJ,PPAR,PRED,PTM,SP,SPP,SS,
     +                 ST,TINC
      INTEGER I,IC,IPC,IS,J,K,KK,KS,MAXC,MPN,NT,NTEST,NTPAR,NWC,NWD,NWF,
     +        NWI,NWT,NWV,NWW,NWX
C     ..
C     .. External Subroutines ..
      EXTERNAL CALFUN,MB11AD
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC DABS,DMAX1,DMIN1,DSQRT,FLOAT,IABS
C     ..
C     .. Executable Statements ..
C     SET VARIOUS PARAMETERS
      MAXC = 0
C     'MAXC' COUNTS THE NUMBER OF CALLS OF CALFUN
      MPN = M + N
      NT = N + 2
      NTEST = 0
C     'NT' AND 'NTEST' CAUSE AN ERROR RETURN IF F(X) DOES NOT DECREASE
      DTEST = FLOAT(N+N) - 0.5
C     'DTEST' IS USED IN A TEST TO MAINTAIN LINEAR INDEPENDENCE
C     PARTITION THE WORKING SPACE ARRAY W
C     THE FIRST PARTITION HOLDS THE JACOBIAN APPROXIMATION
      NWI = M*N
C     THE NEXT PARTITION HOLDS THE GENERALIZED INVERSE
      NWX = NWI + MPN*N
C     THE NEXT PARTITION HOLDS THE BEST VECTOR X
      NWF = NWX + N
C     THE NEXT PARTITION HOLDS THE BEST VECTOR F
      NWC = NWF + M
C     THE NEXT PARTITION HOLDS THE COUNTS OF THE INDEPENDENT DIRECTIONS
      NWD = NWC + N
C     THE NEXT PARTITION HOLDS THE INDEPENDENT DIRECTIONS
      NWW = NWD + N*N
C     THE REMAINDER OF W IS USED FOR SCRATCH VECTORS
      NWV = NWW + N
      NWT = NWV + M
      FMIN = -1.0D0
C     USUALLY 'FMIN' IS THE LEAST CALCULATED VALUE OF F(X)
      DD = 0.0D0
C     USUALLY 'DD' IS THE SQUARE OF THE CURRENT STEP LENGTH
      DSS = DSTEP*DSTEP
      DM = DMAX*DMAX
      PARM = DSQRT(ACC)/DMAX
C     'PARM' IS THE LEAST VALUE OF THE MARQUARDT PARAMETER
      DPAR = 10.0D0*DM
C     'DPAR' AND 'NTPAR' ARE USED TO REGULATE THE MARQUARDT PARAMETER
      IS = 4
C     'IS' CONTROLS A GO TO STATEMENT FOLLOWING A CALL OF CALFUN
      IC = 0
      TINC = 1.0D0
C     'TINC' IS USED IN THE CRITERION TO INCREASE THE STEP LENGTH
C     START A NEW PAGE FOR PRINTING
      IF (IPRINT) 1,3,1
    1 WRITE (6,FMT=2)

    2 FORMAT (1H1,4X,'THE FOLLOWING OUTPUT IS PROVIDED BY SUBROUTINE',
     +       ' VA05AD',/,/)

      IPC = 0
      GO TO 3
C     TEST WHETHER THERE HAVE BEEN MAXFUN CALLS OF CALFUN
    4 IF (MAXFUN-MAXC) 5,5,3
    5 IF (IPRINT) 139,140,139
  140 IPRINT = 2
      GO TO 19

  139 WRITE (6,FMT=6) MAXC

    6 FORMAT (/,/,/,5X,'ERROR RETURN FROM VA05A BECAUSE THERE HAVE BEEN'
     +       ,I5,' CALLS OF CALFUN')

      GO TO 7
C     CALL THE SUBROUTINE CALFUN
    3 MAXC = MAXC + 1
      CALL CALFUN(M,N,F,X)
C     CALCULATE THE SUM OF SQUARES
      FSQ = 0.0D0
      DO 8 I = 1,M
        FSQ = FSQ + F(I)*F(I)
    8 CONTINUE
C     TEST FOR ERROR RETURN BECAUSE F(X) DOES NOT DECREASE
      GO TO (9,10,9,10) IS

    9 IF (FSQ-FMIN) 11,12,12
   12 IF (DD-DSS) 13,13,10
   13 NTEST = NTEST - 1
      IF (NTEST) 14,14,10
   14 IF (IPRINT) 15,17,15
   17 IPRINT = 1
      GO TO 19

   15 WRITE (6,FMT=16)

   16 FORMAT (/,/,/,5X,'ERROR RETURN FROM VA05A BECAUSE F(X) NO LONGER',
     +       ' DECREASES',/,/,5X,
     +       'THIS MAY BE DUE TO THE VALUES OF DSTEP',
     +       ' AND ACC, OR TO LOSS OF RANK IN THE JACOBIAN MATRIX')
C     PROVIDE PRINTING OF FINAL SOLUTION IF REQUESTED
    7 IF (IPRINT) 18,19,18
   18 WRITE (6,FMT=20) MAXC

   20 FORMAT (/,/,/,5X,'THE FINAL SOLUTION CALCULATED BY VA05A REQUIRED'
     +       ,I5,' CALLS OF CALFUN, AND IS')

      WRITE (6,FMT=21) (I,W(NWX+I),I=1,N)

   21 FORMAT (/,/,4X,'I',7X,'X(I)',10X,'I',7X,'X(I)',10X,'I',7X,'X(I)',
     +       10X,'I',7X,'X(I)',10X,'I',7X,'X(I)',/,/,5 (I5,D17.8))

      WRITE (6,FMT=22) (I,W(NWF+I),I=1,M)

   22 FORMAT (/,/,4X,'I',7X,'F(I)',10X,'I',7X,'F(I)',10X,'I',7X,'F(I)',
     +       10X,'I',7X,'F(I)',10X,'I',7X,'F(I)',/,/,5 (I5,D17.8))

      WRITE (6,FMT=23) FMIN

   23 FORMAT (/,5X,'THE SUM OF SQUARES IS',D17.8)
C     RESTORE THE BEST VALUES OF X AND F
   19 DO 135 I = 1,N
        X(I) = W(NWX+I)
  135 CONTINUE
      DO 136 I = 1,M
        F(I) = W(NWF+I)
  136 CONTINUE
      RETURN

   11 NTEST = NT
C     PROVIDE ORDINARY PRINTING IF REQUESTED
   10 IF (IABS(IPRINT)-1) 39,38,40
   38 WRITE (6,FMT=41) MAXC

   41 FORMAT (/,/,/,5X,'AT THE',I5,' TH CALL OF CALFUN WE HAVE')

   42 WRITE (6,FMT=21) (I,X(I),I=1,N)
      WRITE (6,FMT=23) FSQ
      IF (IPRINT) 39,39,142
  142 WRITE (6,FMT=22) (I,F(I),I=1,M)
      GO TO 39

   40 IPC = IPC - 1
      IF (IPC) 43,43,39
   43 WRITE (6,FMT=44) MAXC

   44 FORMAT (/,/,/,5X,'THE BEST ESTIMATE AFTER',I5,
     +       ' CALLS OF CALFUN IS')

      IPC = IABS(IPRINT)
      IF (FSQ-FMIN) 42,45,45
   45 IF (FMIN) 42,46,46
   46 WRITE (6,FMT=21) (I,W(NWX+I),I=1,N)
      WRITE (6,FMT=23) FMIN
      IF (IPRINT) 39,39,143
  143 WRITE (6,FMT=22) (I,W(NWF+I),I=1,M)
   39 GO TO (49,47,47,48) IS
C     STORE THE INITIAL VECTORS X AND F
   48 IF (IC) 50,50,51
   50 DO 52 I = 1,N
        W(NWX+I) = X(I)
   52 CONTINUE
      GO TO 54
C     CALCULATE THE INITIAL JACOBIAN APPROXIMATION
   51 K = IC
      DO 55 I = 1,M
        W(K) = (F(I)-W(NWF+I))/DSTEP
        K = K + N
   55 CONTINUE
C     TEST WHETHER THE MOST RECENT X IS BEST
      IF (FMIN-FSQ) 56,56,57
   56 X(IC) = W(NWX+IC)
      GO TO 58

   57 W(NWX+IC) = X(IC)
   54 DO 53 I = 1,M
        W(NWF+I) = F(I)
   53 CONTINUE
      FMIN = FSQ
C     SET X FOR THE NEXT CALL OF CALFUN
   58 IC = IC + 1
      IF (IC-N) 59,59,60
   59 X(IC) = W(NWX+IC) + DSTEP
      GO TO 3
C     SET THE DIRECTION MATRIX
   60 K = NWD
      DO 61 I = 1,N
        DO 62 J = 1,N
          K = K + 1
          W(K) = 0.0D0
   62   CONTINUE
        W(K+I-N) = 1.D0
        W(NWC+I) = 1.0D0 + DBLE(N-I)
   61 CONTINUE
C     SET THE MARQUARDT PARAMETER TO ITS LEAST VALUE
   24 PAR = PARM
C     COPY THE JACOBIAN AND APPEND THE MARQUARDT MATRIX
   25 PPAR = PAR*PAR
      NTPAR = 0
   63 KK = 0
      K = NWI + NWI
      DO 26 I = 1,N
        DO 141 J = 1,M
          KK = KK + 1
          W(KK+NWI) = W(KK)
  141   CONTINUE
        DO 27 J = 1,N
          K = K + 1
          W(K) = 0.0D0
   27   CONTINUE
        W(K+I-N) = PAR
   26 CONTINUE
C     CALCULATE THE GENERALIZED INVERSE OF J
      CALL MB11AD(N,MPN,W(NWI+1),N,W(NWW+1))
C     START THE ITERATION BY TESTING FMIN
   64 IF (FMIN-ACC) 7,7,65
C     NEXT PREDICT THE DESCENT AND MARQUARDT MINIMA
   65 DS = 0.0D0
      DN = 0.0D0
      SP = 0.0D0
      DO 66 I = 1,N
        X(I) = 0.0D0
        F(I) = 0.0D0
        K = I
        DO 67 J = 1,M
          X(I) = X(I) - W(K)*W(NWF+J)
          F(I) = F(I) - W(NWI+K)*W(NWF+J)
          K = K + N
   67   CONTINUE
        DS = DS + X(I)*X(I)
        DN = DN + F(I)*F(I)
        SP = SP + X(I)*F(I)
   66 CONTINUE
C     PREDICT THE REDUCTION IN F(X) DUE TO THE MARQUARDT STEP
C     AND ALSO PREDICT THE LENGTH OF THE STEEPEST DESCENT STEP
      PRED = SP + SP
      DMULT = 0.0D0
      K = 0
      DO 68 I = 1,M
        AP = 0.0D0
        AD = 0.0D0
        DO 69 J = 1,N
          K = K + 1
          AP = AP + W(K)*F(J)
          AD = AD + W(K)*X(J)
   69   CONTINUE
        PRED = PRED - AP*AP
        DMULT = DMULT + AD*AD
   68 CONTINUE
C     TEST FOR CONVERGENCE
      IF (DN-DM) 28,28,29
   28 AP = DSQRT(DN)
      IF (PRED+2.0D0*PPAR*AP* (DMAX-AP)-ACC) 7,7,70
   29 IF (PRED+PPAR* (DM-DN)-ACC) 7,7,70
C     TEST WHETHER TO APPLY THE FULL MARQUARDT CORRECTION
   70 DMULT = DS/DMULT
      DS = DS*DMULT*DMULT
   71 IS = 2
      IF (DN-DD) 72,72,73
C     TEST THAT THE MARQUARDT PARAMETER HAS ITS LEAST VALUE
   72 IF (PAR-PARM) 30,30,24
   30 DD = DMAX1(DN,DSS)
      DS = 0.25D0*DN
      TINC = 1.0D0
      IF (DN-DSS) 74,132,132
   74 IS = 3
      GO TO 103
C     TEST WHETHER TO INCREASE THE MARQUARDT PARAMETER
   73 IF (DN-DPAR) 31,31,32
   31 NTPAR = 0
      GO TO 33

   32 IF (NTPAR) 34,34,35
   34 NTPAR = 1
      PTM = DN
      GO TO 33

   35 NTPAR = NTPAR + 1
      PTM = DMIN1(PTM,DN)
      IF (NTPAR-NT) 33,36,36
C     SET THE LARGER VALUE OF THE MARQUARDT PARAMETER
   36 PAR = PAR* (PTM/DM)**0.25D0
      IF (6.0D0*DD-DM) 137,25,25
  137 AP = DSQRT(PRED/DN)
      IF (AP-PAR) 25,25,138
  138 PAR = DMIN1(AP,PAR* (DM/ (6.0D0*DD))**0.25D0)
      GO TO 25
C     TEST WHETHER TO USE THE STEEPEST DESCENT DIRECTION
   33 IF (DS-DD) 75,76,76
C     TEST WHETHER THE INITIAL VALUE OF DD HAS BEEN SET
   76 IF (DD) 77,77,78
   77 DD = DMIN1(DM,DS)
      IF (DD-DSS) 79,78,78
   79 DD = DSS
      GO TO 71
C     SET THE MULTIPLIER OF THE STEEPEST DESCENT DIRECTION
   78 ANMULT = 0.D0
      DMULT = DMULT*DSQRT(DD/DS)
      GO TO 80
C     INTERPOLATE BETWEEN THE STEEPEST DESCENT AND MARQUARDT DIRECTIONS
   75 SP = SP*DMULT
      ANMULT = (DD-DS)/ ((SP-DS)+DSQRT((SP-DD)**2+ (DN-DD)* (DD-DS)))
      DMULT = DMULT* (1.0D0-ANMULT)
C     CALCULATE THE CORRECTION TO X, AND ITS ANGLE WITH THE FIRST
C     DIRECTION
   80 DN = 0.0D0
      SP = 0.0D0
      DO 81 I = 1,N
        F(I) = DMULT*X(I) + ANMULT*F(I)
        DN = DN + F(I)*F(I)
        SP = SP + F(I)*W(NWD+I)
   81 CONTINUE
      DS = 0.25D0*DN
C     TEST WHETHER AN EXTRA STEP IS NEEDED FOR INDEPENDENCE
      IF (W(NWC+1)-DTEST) 132,132,82
   82 IF (SP*SP-DS) 83,132,132
C     TAKE THE EXTRA STEP AND UPDATE THE DIRECTION MATRIX
   83 DO 84 I = 1,N
        X(I) = W(NWX+I) + DSTEP*W(NWD+I)
        W(NWC+I) = W(NWC+I+1) + 1.D0
   84 CONTINUE
      W(NWD) = 1.D0
      IF (N.LE.1) GO TO 4
      DO 85 I = 1,N
        K = NWD + I
        SP = W(K)
        DO 86 J = 2,N
          W(K) = W(K+N)
          K = K + N
   86   CONTINUE
        W(K) = SP
   85 CONTINUE
      GO TO 4
C     EXPRESS THE NEW DIRECTION IN TERMS OF THOSE OF THE DIRECTION
C     MATRIX, AND UPDATE THE COUNTS IN W(NWC+1) ETC.
  132 IF (N.GE.2) GO TO 153
      IS = 1
      GO TO 152

  153 SP = 0D0
      K = NWD
      DW = 0.0D0
      DO 87 I = 1,N
        X(I) = DW
        DW = 0.0D0
        DO 88 J = 1,N
          K = K + 1
          DW = DW + F(J)*W(K)
   88   CONTINUE
        GO TO (89,90) IS

   90   W(NWC+I) = W(NWC+I) + 1.D0
        SP = SP + DW*DW
        IF (SP-DS) 87,87,91
   91   IS = 1
        KK = I
        X(1) = DW
        GO TO 92

   89   X(I) = DW
   92   W(NWC+I) = W(NWC+I+1) + 1.D0
   87 CONTINUE
      W(NWD) = 1.D0
C     REORDER THE DIRECTIONS SO THAT KK IS FIRST
      IF (KK-1) 93,93,94
   94 KS = NWC + KK*N
      DO 95 I = 1,N
        K = KS + I
        SP = W(K)
        DO 96 J = 2,KK
          W(K) = W(K-N)
          K = K - N
   96   CONTINUE
        W(K) = SP
   95 CONTINUE
C     GENERATE THE NEW ORTHOGONAL DIRECTION MATRIX
   93 DO 97 I = 1,N
        W(NWW+I) = 0.D0
   97 CONTINUE
      SP = X(1)*X(1)
      K = NWD
      DO 98 I = 2,N
        DS = DSQRT(SP* (SP+X(I)*X(I)))
        DW = SP/DS
        DS = X(I)/DS
        SP = SP + X(I)*X(I)
        DO 99 J = 1,N
          K = K + 1
          W(NWW+J) = W(NWW+J) + X(I-1)*W(K)
          W(K) = DW*W(K+N) - DS*W(NWW+J)
   99   CONTINUE
   98 CONTINUE
      SP = 1.0D0/DSQRT(DN)
      DO 100 I = 1,N
        K = K + 1
        W(K) = SP*F(I)
  100 CONTINUE
C     PREDICT THE NEW RIGHT HAND SIDES
  152 FNP = 0.0D0
      K = 0
      DO 101 I = 1,M
        W(NWW+I) = W(NWF+I)
        DO 102 J = 1,N
          K = K + 1
          W(NWW+I) = W(NWW+I) + W(K)*F(J)
  102   CONTINUE
        FNP = FNP + W(NWW+I)**2
  101 CONTINUE
C     CALCULATE THE NEXT VECTOR X, AND THEN CALL CALFUN
  103 DO 104 I = 1,N
        X(I) = W(NWX+I) + F(I)
  104 CONTINUE
      GO TO 4
C     UPDATE THE STEP SIZE
   49 DMULT = 0.9D0*FMIN + 0.1D0*FNP - FSQ
      IF (DMULT) 105,108,108
  105 DD = DMAX1(DSS,0.25D0*DD)
      TINC = 1.0D0
      IF (FSQ-FMIN) 106,107,107
C     TRY THE TEST TO DECIDE WHETHER TO INCREASE THE STEP LENGTH
  108 SP = 0.0D0
      SS = 0.0D0
      DO 109 I = 1,M
        SP = SP + DABS(F(I)* (F(I)-W(NWW+I)))
        SS = SS + (F(I)-W(NWW+I))**2
  109 CONTINUE
      PJ = 1.0D0 + DMULT/ (SP+DSQRT(SP*SP+DMULT*SS))
      SP = DMIN1(4.0D0,TINC,PJ)
      TINC = PJ/SP
      DD = DMIN1(DM,SP*DD)
      GO TO 106
C     IF F(X) IMPROVES STORE THE NEW VALUE OF X
   47 IF (FSQ-FMIN) 106,110,110
  106 FMIN = FSQ
      DO 111 I = 1,N
        SP = X(I)
        X(I) = W(NWX+I)
        W(NWX+I) = SP
  111 CONTINUE
      DO 112 I = 1,M
        SP = F(I)
        F(I) = W(NWF+I)
        W(NWF+I) = SP
  112 CONTINUE
  110 GO TO (107,107,113) IS

  113 IS = 2
      IF (FMIN-ACC) 7,7,83
C     CALCULATE THE CHANGES IN X AND IN F
  107 DS = 0.0D0
      DO 114 I = 1,N
        X(I) = X(I) - W(NWX+I)
        DS = DS + X(I)*X(I)
  114 CONTINUE
      DO 115 I = 1,M
        F(I) = F(I) - W(NWF+I)
  115 CONTINUE
C     CALCULATE THE GENERALIZED INVERSE TIMES THE CHANGE IN X
      K = NWI
      SS = 0.0D0
      DO 116 I = 1,MPN
        SP = 0.0D0
        DO 117 J = 1,N
          K = K + 1
          SP = SP + W(K)*X(J)
  117   CONTINUE
        W(NWV+I) = SP
        SS = SS + SP*SP
  116 CONTINUE
C     CALCULATE J TIMES THE CHANGE IN F
C     ALSO APPLY PROJECTION TO THE GENERALIZED INVERSE
      DO 118 I = 1,N
        ST = 0.0D0
        K = NWI + I
        DO 119 J = 1,MPN
          ST = ST + W(K)*W(J+NWV)
          K = K + N
  119   CONTINUE
        ST = ST/SS
        K = NWI + I
        DO 120 J = 1,MPN
          W(K) = W(K) - ST*W(J+NWV)
          K = K + N
  120   CONTINUE
        ST = PPAR*X(I)
        K = I
        DO 121 J = 1,M
          ST = ST + W(K)*F(J)
          K = K + N
  121   CONTINUE
        W(NWW+I) = ST
  118 CONTINUE
C     REVISE J AND CALCULATE ROW VECTOR FOR CORRECTION TO INVERSE
      IC = 0
      K = 0
      KK = NWI
      SP = 0.0D0
      SPP = 0.0D0
      DO 122 I = 1,M
        SS = F(I)
        ST = F(I)
        DO 123 J = 1,N
          IC = IC + 1
          KK = KK + 1
          SS = SS - W(IC)*X(J)
          ST = ST - W(KK)*W(NWW+J)
  123   CONTINUE
        SS = SS/DS
        W(NWV+I) = ST
        SP = SP + F(I)*ST
        SPP = SPP + ST*ST
        DO 124 J = 1,N
          K = K + 1
          W(K) = W(K) + SS*X(J)
  124   CONTINUE
  122 CONTINUE
      DO 125 I = 1,N
        ST = PAR*X(I)
        DO 126 J = 1,N
          KK = KK + 1
          ST = ST - W(KK)*W(NWW+J)
  126   CONTINUE
        W(NWT+I) = ST
        SP = SP + PAR*X(I)*ST
        SPP = SPP + ST*ST
  125 CONTINUE
C     TEST THAT THE SCALAR PRODUCT IS SUFFICIENTLY ACCURATE
      IF (0.01D0*SPP-DABS(SP-SPP)) 63,63,127
C     CALCULATE THE NEW GENERALIZED INVERSE
  127 DO 128 I = 1,N
        K = NWI + I
        ST = X(I)
        DO 129 J = 1,M
          ST = ST - W(K)*F(J)
          K = K + N
  129   CONTINUE
        SS = 0.0D0
        DO 130 J = 1,N
          SS = SS + W(K)*X(J)
          K = K + N
  130   CONTINUE
        ST = (ST-PAR*SS)/SP
        K = NWI + I
        DO 131 J = 1,MPN
          W(K) = W(K) + ST*W(NWV+J)
          K = K + N
  131   CONTINUE
  128 CONTINUE
      GO TO 64

      END
